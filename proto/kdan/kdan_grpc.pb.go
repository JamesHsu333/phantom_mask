// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package kdanProto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KdanServiceClient is the client API for KdanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KdanServiceClient interface {
	GetPharmaciesByTime(ctx context.Context, in *GetPharmaciesByTimeRequest, opts ...grpc.CallOption) (*GetPharmaciesByTimeResponse, error)
	GetSoldMasksByPharmacy(ctx context.Context, in *GetSoldMasksByPharmacyRequest, opts ...grpc.CallOption) (*GetSoldMasksByPharmacyResponse, error)
	GetPharmaciesMaskCountsByMaskPriceRange(ctx context.Context, in *GetPharmaciesMaskCountsByMaskPriceRangeRequest, opts ...grpc.CallOption) (*GetPharmaciesMaskCountsByMaskPriceRangeResponse, error)
	GetTopXUsersTransactionByDateRange(ctx context.Context, in *GetTopXUsersTransactionByDateRangeRequest, opts ...grpc.CallOption) (*GetTopXUsersTransactionByDateRangeResponse, error)
	GetAggTransactionsByDateRange(ctx context.Context, in *GetAggTransactionsByDateRangeRequest, opts ...grpc.CallOption) (*GetAggTransactionsByDateRangeResponse, error)
	GetPharmaciesByNameRelevancy(ctx context.Context, in *GetPharmaciesByNameRelevancyRequest, opts ...grpc.CallOption) (*GetPharmaciesByNameRelevancyResponse, error)
	GetMasksByNameRelevancy(ctx context.Context, in *GetMasksByNameRelevancyRequest, opts ...grpc.CallOption) (*GetMasksByNameRelevancyResponse, error)
	PurchaseMaskFromPharmacy(ctx context.Context, in *PurchaseMaskFromPharmacyRequest, opts ...grpc.CallOption) (*PurchaseMaskFromPharmacyResponse, error)
}

type kdanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKdanServiceClient(cc grpc.ClientConnInterface) KdanServiceClient {
	return &kdanServiceClient{cc}
}

func (c *kdanServiceClient) GetPharmaciesByTime(ctx context.Context, in *GetPharmaciesByTimeRequest, opts ...grpc.CallOption) (*GetPharmaciesByTimeResponse, error) {
	out := new(GetPharmaciesByTimeResponse)
	err := c.cc.Invoke(ctx, "/kdan.KdanService/GetPharmaciesByTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kdanServiceClient) GetSoldMasksByPharmacy(ctx context.Context, in *GetSoldMasksByPharmacyRequest, opts ...grpc.CallOption) (*GetSoldMasksByPharmacyResponse, error) {
	out := new(GetSoldMasksByPharmacyResponse)
	err := c.cc.Invoke(ctx, "/kdan.KdanService/GetSoldMasksByPharmacy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kdanServiceClient) GetPharmaciesMaskCountsByMaskPriceRange(ctx context.Context, in *GetPharmaciesMaskCountsByMaskPriceRangeRequest, opts ...grpc.CallOption) (*GetPharmaciesMaskCountsByMaskPriceRangeResponse, error) {
	out := new(GetPharmaciesMaskCountsByMaskPriceRangeResponse)
	err := c.cc.Invoke(ctx, "/kdan.KdanService/GetPharmaciesMaskCountsByMaskPriceRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kdanServiceClient) GetTopXUsersTransactionByDateRange(ctx context.Context, in *GetTopXUsersTransactionByDateRangeRequest, opts ...grpc.CallOption) (*GetTopXUsersTransactionByDateRangeResponse, error) {
	out := new(GetTopXUsersTransactionByDateRangeResponse)
	err := c.cc.Invoke(ctx, "/kdan.KdanService/GetTopXUsersTransactionByDateRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kdanServiceClient) GetAggTransactionsByDateRange(ctx context.Context, in *GetAggTransactionsByDateRangeRequest, opts ...grpc.CallOption) (*GetAggTransactionsByDateRangeResponse, error) {
	out := new(GetAggTransactionsByDateRangeResponse)
	err := c.cc.Invoke(ctx, "/kdan.KdanService/GetAggTransactionsByDateRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kdanServiceClient) GetPharmaciesByNameRelevancy(ctx context.Context, in *GetPharmaciesByNameRelevancyRequest, opts ...grpc.CallOption) (*GetPharmaciesByNameRelevancyResponse, error) {
	out := new(GetPharmaciesByNameRelevancyResponse)
	err := c.cc.Invoke(ctx, "/kdan.KdanService/GetPharmaciesByNameRelevancy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kdanServiceClient) GetMasksByNameRelevancy(ctx context.Context, in *GetMasksByNameRelevancyRequest, opts ...grpc.CallOption) (*GetMasksByNameRelevancyResponse, error) {
	out := new(GetMasksByNameRelevancyResponse)
	err := c.cc.Invoke(ctx, "/kdan.KdanService/GetMasksByNameRelevancy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kdanServiceClient) PurchaseMaskFromPharmacy(ctx context.Context, in *PurchaseMaskFromPharmacyRequest, opts ...grpc.CallOption) (*PurchaseMaskFromPharmacyResponse, error) {
	out := new(PurchaseMaskFromPharmacyResponse)
	err := c.cc.Invoke(ctx, "/kdan.KdanService/PurchaseMaskFromPharmacy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KdanServiceServer is the server API for KdanService service.
// All implementations must embed UnimplementedKdanServiceServer
// for forward compatibility
type KdanServiceServer interface {
	GetPharmaciesByTime(context.Context, *GetPharmaciesByTimeRequest) (*GetPharmaciesByTimeResponse, error)
	GetSoldMasksByPharmacy(context.Context, *GetSoldMasksByPharmacyRequest) (*GetSoldMasksByPharmacyResponse, error)
	GetPharmaciesMaskCountsByMaskPriceRange(context.Context, *GetPharmaciesMaskCountsByMaskPriceRangeRequest) (*GetPharmaciesMaskCountsByMaskPriceRangeResponse, error)
	GetTopXUsersTransactionByDateRange(context.Context, *GetTopXUsersTransactionByDateRangeRequest) (*GetTopXUsersTransactionByDateRangeResponse, error)
	GetAggTransactionsByDateRange(context.Context, *GetAggTransactionsByDateRangeRequest) (*GetAggTransactionsByDateRangeResponse, error)
	GetPharmaciesByNameRelevancy(context.Context, *GetPharmaciesByNameRelevancyRequest) (*GetPharmaciesByNameRelevancyResponse, error)
	GetMasksByNameRelevancy(context.Context, *GetMasksByNameRelevancyRequest) (*GetMasksByNameRelevancyResponse, error)
	PurchaseMaskFromPharmacy(context.Context, *PurchaseMaskFromPharmacyRequest) (*PurchaseMaskFromPharmacyResponse, error)
	mustEmbedUnimplementedKdanServiceServer()
}

// UnimplementedKdanServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKdanServiceServer struct {
}

func (UnimplementedKdanServiceServer) GetPharmaciesByTime(context.Context, *GetPharmaciesByTimeRequest) (*GetPharmaciesByTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPharmaciesByTime not implemented")
}
func (UnimplementedKdanServiceServer) GetSoldMasksByPharmacy(context.Context, *GetSoldMasksByPharmacyRequest) (*GetSoldMasksByPharmacyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSoldMasksByPharmacy not implemented")
}
func (UnimplementedKdanServiceServer) GetPharmaciesMaskCountsByMaskPriceRange(context.Context, *GetPharmaciesMaskCountsByMaskPriceRangeRequest) (*GetPharmaciesMaskCountsByMaskPriceRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPharmaciesMaskCountsByMaskPriceRange not implemented")
}
func (UnimplementedKdanServiceServer) GetTopXUsersTransactionByDateRange(context.Context, *GetTopXUsersTransactionByDateRangeRequest) (*GetTopXUsersTransactionByDateRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopXUsersTransactionByDateRange not implemented")
}
func (UnimplementedKdanServiceServer) GetAggTransactionsByDateRange(context.Context, *GetAggTransactionsByDateRangeRequest) (*GetAggTransactionsByDateRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAggTransactionsByDateRange not implemented")
}
func (UnimplementedKdanServiceServer) GetPharmaciesByNameRelevancy(context.Context, *GetPharmaciesByNameRelevancyRequest) (*GetPharmaciesByNameRelevancyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPharmaciesByNameRelevancy not implemented")
}
func (UnimplementedKdanServiceServer) GetMasksByNameRelevancy(context.Context, *GetMasksByNameRelevancyRequest) (*GetMasksByNameRelevancyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMasksByNameRelevancy not implemented")
}
func (UnimplementedKdanServiceServer) PurchaseMaskFromPharmacy(context.Context, *PurchaseMaskFromPharmacyRequest) (*PurchaseMaskFromPharmacyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseMaskFromPharmacy not implemented")
}
func (UnimplementedKdanServiceServer) mustEmbedUnimplementedKdanServiceServer() {}

// UnsafeKdanServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KdanServiceServer will
// result in compilation errors.
type UnsafeKdanServiceServer interface {
	mustEmbedUnimplementedKdanServiceServer()
}

func RegisterKdanServiceServer(s grpc.ServiceRegistrar, srv KdanServiceServer) {
	s.RegisterService(&KdanService_ServiceDesc, srv)
}

func _KdanService_GetPharmaciesByTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPharmaciesByTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KdanServiceServer).GetPharmaciesByTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kdan.KdanService/GetPharmaciesByTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KdanServiceServer).GetPharmaciesByTime(ctx, req.(*GetPharmaciesByTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KdanService_GetSoldMasksByPharmacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSoldMasksByPharmacyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KdanServiceServer).GetSoldMasksByPharmacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kdan.KdanService/GetSoldMasksByPharmacy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KdanServiceServer).GetSoldMasksByPharmacy(ctx, req.(*GetSoldMasksByPharmacyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KdanService_GetPharmaciesMaskCountsByMaskPriceRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPharmaciesMaskCountsByMaskPriceRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KdanServiceServer).GetPharmaciesMaskCountsByMaskPriceRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kdan.KdanService/GetPharmaciesMaskCountsByMaskPriceRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KdanServiceServer).GetPharmaciesMaskCountsByMaskPriceRange(ctx, req.(*GetPharmaciesMaskCountsByMaskPriceRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KdanService_GetTopXUsersTransactionByDateRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopXUsersTransactionByDateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KdanServiceServer).GetTopXUsersTransactionByDateRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kdan.KdanService/GetTopXUsersTransactionByDateRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KdanServiceServer).GetTopXUsersTransactionByDateRange(ctx, req.(*GetTopXUsersTransactionByDateRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KdanService_GetAggTransactionsByDateRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAggTransactionsByDateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KdanServiceServer).GetAggTransactionsByDateRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kdan.KdanService/GetAggTransactionsByDateRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KdanServiceServer).GetAggTransactionsByDateRange(ctx, req.(*GetAggTransactionsByDateRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KdanService_GetPharmaciesByNameRelevancy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPharmaciesByNameRelevancyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KdanServiceServer).GetPharmaciesByNameRelevancy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kdan.KdanService/GetPharmaciesByNameRelevancy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KdanServiceServer).GetPharmaciesByNameRelevancy(ctx, req.(*GetPharmaciesByNameRelevancyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KdanService_GetMasksByNameRelevancy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMasksByNameRelevancyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KdanServiceServer).GetMasksByNameRelevancy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kdan.KdanService/GetMasksByNameRelevancy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KdanServiceServer).GetMasksByNameRelevancy(ctx, req.(*GetMasksByNameRelevancyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KdanService_PurchaseMaskFromPharmacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchaseMaskFromPharmacyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KdanServiceServer).PurchaseMaskFromPharmacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kdan.KdanService/PurchaseMaskFromPharmacy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KdanServiceServer).PurchaseMaskFromPharmacy(ctx, req.(*PurchaseMaskFromPharmacyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KdanService_ServiceDesc is the grpc.ServiceDesc for KdanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KdanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kdan.KdanService",
	HandlerType: (*KdanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPharmaciesByTime",
			Handler:    _KdanService_GetPharmaciesByTime_Handler,
		},
		{
			MethodName: "GetSoldMasksByPharmacy",
			Handler:    _KdanService_GetSoldMasksByPharmacy_Handler,
		},
		{
			MethodName: "GetPharmaciesMaskCountsByMaskPriceRange",
			Handler:    _KdanService_GetPharmaciesMaskCountsByMaskPriceRange_Handler,
		},
		{
			MethodName: "GetTopXUsersTransactionByDateRange",
			Handler:    _KdanService_GetTopXUsersTransactionByDateRange_Handler,
		},
		{
			MethodName: "GetAggTransactionsByDateRange",
			Handler:    _KdanService_GetAggTransactionsByDateRange_Handler,
		},
		{
			MethodName: "GetPharmaciesByNameRelevancy",
			Handler:    _KdanService_GetPharmaciesByNameRelevancy_Handler,
		},
		{
			MethodName: "GetMasksByNameRelevancy",
			Handler:    _KdanService_GetMasksByNameRelevancy_Handler,
		},
		{
			MethodName: "PurchaseMaskFromPharmacy",
			Handler:    _KdanService_PurchaseMaskFromPharmacy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kdan/kdan.proto",
}
