// @proto/ type following command to build pb.go
// protoc --proto_path=./ --go_out=./ --go-grpc_out=./ --grpc-gateway_out ./ --go_opt=paths=source_relative --go-grpc_opt=paths=source_relative --grpc-gateway_opt logtostderr=true --grpc-gateway_opt=paths=source_relative kdan/kdan.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.0--rc2
// source: kdan/kdan.proto

package kdanProto

import (
	pharmacy "github.com/JamesHsu333/kdan/proto/pharmacy"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DayOfWeek int32

const (
	DayOfWeek_unspecified DayOfWeek = 0
	DayOfWeek_mon         DayOfWeek = 1
	DayOfWeek_tue         DayOfWeek = 2
	DayOfWeek_wed         DayOfWeek = 3
	DayOfWeek_thur        DayOfWeek = 4
	DayOfWeek_fri         DayOfWeek = 5
	DayOfWeek_sat         DayOfWeek = 6
	DayOfWeek_sun         DayOfWeek = 7
)

// Enum value maps for DayOfWeek.
var (
	DayOfWeek_name = map[int32]string{
		0: "unspecified",
		1: "mon",
		2: "tue",
		3: "wed",
		4: "thur",
		5: "fri",
		6: "sat",
		7: "sun",
	}
	DayOfWeek_value = map[string]int32{
		"unspecified": 0,
		"mon":         1,
		"tue":         2,
		"wed":         3,
		"thur":        4,
		"fri":         5,
		"sat":         6,
		"sun":         7,
	}
)

func (x DayOfWeek) Enum() *DayOfWeek {
	p := new(DayOfWeek)
	*p = x
	return p
}

func (x DayOfWeek) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DayOfWeek) Descriptor() protoreflect.EnumDescriptor {
	return file_kdan_kdan_proto_enumTypes[0].Descriptor()
}

func (DayOfWeek) Type() protoreflect.EnumType {
	return &file_kdan_kdan_proto_enumTypes[0]
}

func (x DayOfWeek) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DayOfWeek.Descriptor instead.
func (DayOfWeek) EnumDescriptor() ([]byte, []int) {
	return file_kdan_kdan_proto_rawDescGZIP(), []int{0}
}

type Order int32

const (
	Order_asc  Order = 0
	Order_desc Order = 1
)

// Enum value maps for Order.
var (
	Order_name = map[int32]string{
		0: "asc",
		1: "desc",
	}
	Order_value = map[string]int32{
		"asc":  0,
		"desc": 1,
	}
)

func (x Order) Enum() *Order {
	p := new(Order)
	*p = x
	return p
}

func (x Order) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Order) Descriptor() protoreflect.EnumDescriptor {
	return file_kdan_kdan_proto_enumTypes[1].Descriptor()
}

func (Order) Type() protoreflect.EnumType {
	return &file_kdan_kdan_proto_enumTypes[1]
}

func (x Order) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Order.Descriptor instead.
func (Order) EnumDescriptor() ([]byte, []int) {
	return file_kdan_kdan_proto_rawDescGZIP(), []int{1}
}

type GetSoldMasksByPharmacyRequest_SortedBy int32

const (
	GetSoldMasksByPharmacyRequest_mask_name  GetSoldMasksByPharmacyRequest_SortedBy = 0
	GetSoldMasksByPharmacyRequest_mask_price GetSoldMasksByPharmacyRequest_SortedBy = 1
)

// Enum value maps for GetSoldMasksByPharmacyRequest_SortedBy.
var (
	GetSoldMasksByPharmacyRequest_SortedBy_name = map[int32]string{
		0: "mask_name",
		1: "mask_price",
	}
	GetSoldMasksByPharmacyRequest_SortedBy_value = map[string]int32{
		"mask_name":  0,
		"mask_price": 1,
	}
)

func (x GetSoldMasksByPharmacyRequest_SortedBy) Enum() *GetSoldMasksByPharmacyRequest_SortedBy {
	p := new(GetSoldMasksByPharmacyRequest_SortedBy)
	*p = x
	return p
}

func (x GetSoldMasksByPharmacyRequest_SortedBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetSoldMasksByPharmacyRequest_SortedBy) Descriptor() protoreflect.EnumDescriptor {
	return file_kdan_kdan_proto_enumTypes[2].Descriptor()
}

func (GetSoldMasksByPharmacyRequest_SortedBy) Type() protoreflect.EnumType {
	return &file_kdan_kdan_proto_enumTypes[2]
}

func (x GetSoldMasksByPharmacyRequest_SortedBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetSoldMasksByPharmacyRequest_SortedBy.Descriptor instead.
func (GetSoldMasksByPharmacyRequest_SortedBy) EnumDescriptor() ([]byte, []int) {
	return file_kdan_kdan_proto_rawDescGZIP(), []int{2, 0}
}

type GetPharmaciesByTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day    DayOfWeek `protobuf:"varint,1,opt,name=day,proto3,enum=kdan.DayOfWeek" json:"day,omitempty"`
	Hour   int32     `protobuf:"varint,2,opt,name=hour,proto3" json:"hour,omitempty"`
	Minute int32     `protobuf:"varint,3,opt,name=minute,proto3" json:"minute,omitempty"`
}

func (x *GetPharmaciesByTimeRequest) Reset() {
	*x = GetPharmaciesByTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kdan_kdan_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPharmaciesByTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPharmaciesByTimeRequest) ProtoMessage() {}

func (x *GetPharmaciesByTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kdan_kdan_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPharmaciesByTimeRequest.ProtoReflect.Descriptor instead.
func (*GetPharmaciesByTimeRequest) Descriptor() ([]byte, []int) {
	return file_kdan_kdan_proto_rawDescGZIP(), []int{0}
}

func (x *GetPharmaciesByTimeRequest) GetDay() DayOfWeek {
	if x != nil {
		return x.Day
	}
	return DayOfWeek_unspecified
}

func (x *GetPharmaciesByTimeRequest) GetHour() int32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *GetPharmaciesByTimeRequest) GetMinute() int32 {
	if x != nil {
		return x.Minute
	}
	return 0
}

type GetPharmaciesByTimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pharmacies []*pharmacy.Pharmacy `protobuf:"bytes,1,rep,name=pharmacies,proto3" json:"pharmacies,omitempty"`
}

func (x *GetPharmaciesByTimeResponse) Reset() {
	*x = GetPharmaciesByTimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kdan_kdan_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPharmaciesByTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPharmaciesByTimeResponse) ProtoMessage() {}

func (x *GetPharmaciesByTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kdan_kdan_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPharmaciesByTimeResponse.ProtoReflect.Descriptor instead.
func (*GetPharmaciesByTimeResponse) Descriptor() ([]byte, []int) {
	return file_kdan_kdan_proto_rawDescGZIP(), []int{1}
}

func (x *GetPharmaciesByTimeResponse) GetPharmacies() []*pharmacy.Pharmacy {
	if x != nil {
		return x.Pharmacies
	}
	return nil
}

type GetSoldMasksByPharmacyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string                                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SortedBy GetSoldMasksByPharmacyRequest_SortedBy `protobuf:"varint,2,opt,name=sorted_by,json=sortedBy,proto3,enum=kdan.GetSoldMasksByPharmacyRequest_SortedBy" json:"sorted_by,omitempty"`
	OrderBy  Order                                  `protobuf:"varint,3,opt,name=order_by,json=orderBy,proto3,enum=kdan.Order" json:"order_by,omitempty"`
}

func (x *GetSoldMasksByPharmacyRequest) Reset() {
	*x = GetSoldMasksByPharmacyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kdan_kdan_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSoldMasksByPharmacyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSoldMasksByPharmacyRequest) ProtoMessage() {}

func (x *GetSoldMasksByPharmacyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kdan_kdan_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSoldMasksByPharmacyRequest.ProtoReflect.Descriptor instead.
func (*GetSoldMasksByPharmacyRequest) Descriptor() ([]byte, []int) {
	return file_kdan_kdan_proto_rawDescGZIP(), []int{2}
}

func (x *GetSoldMasksByPharmacyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetSoldMasksByPharmacyRequest) GetSortedBy() GetSoldMasksByPharmacyRequest_SortedBy {
	if x != nil {
		return x.SortedBy
	}
	return GetSoldMasksByPharmacyRequest_mask_name
}

func (x *GetSoldMasksByPharmacyRequest) GetOrderBy() Order {
	if x != nil {
		return x.OrderBy
	}
	return Order_asc
}

type GetSoldMasksByPharmacyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SoldMasks []*GetSoldMasksByPharmacyResponseSoldMask `protobuf:"bytes,1,rep,name=sold_masks,json=soldMasks,proto3" json:"sold_masks,omitempty"`
}

func (x *GetSoldMasksByPharmacyResponse) Reset() {
	*x = GetSoldMasksByPharmacyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kdan_kdan_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSoldMasksByPharmacyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSoldMasksByPharmacyResponse) ProtoMessage() {}

func (x *GetSoldMasksByPharmacyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kdan_kdan_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSoldMasksByPharmacyResponse.ProtoReflect.Descriptor instead.
func (*GetSoldMasksByPharmacyResponse) Descriptor() ([]byte, []int) {
	return file_kdan_kdan_proto_rawDescGZIP(), []int{3}
}

func (x *GetSoldMasksByPharmacyResponse) GetSoldMasks() []*GetSoldMasksByPharmacyResponseSoldMask {
	if x != nil {
		return x.SoldMasks
	}
	return nil
}

type GetPharmaciesMaskCountsByMaskPriceRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPrice    float32 `protobuf:"fixed32,1,opt,name=start_price,json=startPrice,proto3" json:"start_price,omitempty"`
	EndPrice      float32 `protobuf:"fixed32,2,opt,name=end_price,json=endPrice,proto3" json:"end_price,omitempty"`
	MaskTypeCount int32   `protobuf:"varint,3,opt,name=mask_type_count,json=maskTypeCount,proto3" json:"mask_type_count,omitempty"`
	MoreThan      bool    `protobuf:"varint,4,opt,name=more_than,json=moreThan,proto3" json:"more_than,omitempty"`
}

func (x *GetPharmaciesMaskCountsByMaskPriceRangeRequest) Reset() {
	*x = GetPharmaciesMaskCountsByMaskPriceRangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kdan_kdan_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPharmaciesMaskCountsByMaskPriceRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPharmaciesMaskCountsByMaskPriceRangeRequest) ProtoMessage() {}

func (x *GetPharmaciesMaskCountsByMaskPriceRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kdan_kdan_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPharmaciesMaskCountsByMaskPriceRangeRequest.ProtoReflect.Descriptor instead.
func (*GetPharmaciesMaskCountsByMaskPriceRangeRequest) Descriptor() ([]byte, []int) {
	return file_kdan_kdan_proto_rawDescGZIP(), []int{4}
}

func (x *GetPharmaciesMaskCountsByMaskPriceRangeRequest) GetStartPrice() float32 {
	if x != nil {
		return x.StartPrice
	}
	return 0
}

func (x *GetPharmaciesMaskCountsByMaskPriceRangeRequest) GetEndPrice() float32 {
	if x != nil {
		return x.EndPrice
	}
	return 0
}

func (x *GetPharmaciesMaskCountsByMaskPriceRangeRequest) GetMaskTypeCount() int32 {
	if x != nil {
		return x.MaskTypeCount
	}
	return 0
}

func (x *GetPharmaciesMaskCountsByMaskPriceRangeRequest) GetMoreThan() bool {
	if x != nil {
		return x.MoreThan
	}
	return false
}

type GetPharmaciesMaskCountsByMaskPriceRangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PharmaciesMaskCounts []*GetPharmaciesMaskCountsByMaskPriceRangeResponsePharmaciesMaskCount `protobuf:"bytes,1,rep,name=pharmacies_mask_counts,json=pharmaciesMaskCounts,proto3" json:"pharmacies_mask_counts,omitempty"`
}

func (x *GetPharmaciesMaskCountsByMaskPriceRangeResponse) Reset() {
	*x = GetPharmaciesMaskCountsByMaskPriceRangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kdan_kdan_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPharmaciesMaskCountsByMaskPriceRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPharmaciesMaskCountsByMaskPriceRangeResponse) ProtoMessage() {}

func (x *GetPharmaciesMaskCountsByMaskPriceRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kdan_kdan_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPharmaciesMaskCountsByMaskPriceRangeResponse.ProtoReflect.Descriptor instead.
func (*GetPharmaciesMaskCountsByMaskPriceRangeResponse) Descriptor() ([]byte, []int) {
	return file_kdan_kdan_proto_rawDescGZIP(), []int{5}
}

func (x *GetPharmaciesMaskCountsByMaskPriceRangeResponse) GetPharmaciesMaskCounts() []*GetPharmaciesMaskCountsByMaskPriceRangeResponsePharmaciesMaskCount {
	if x != nil {
		return x.PharmaciesMaskCounts
	}
	return nil
}

type GetTopXUsersTransactionByDateRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	EndAt   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	Size    int32                  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *GetTopXUsersTransactionByDateRangeRequest) Reset() {
	*x = GetTopXUsersTransactionByDateRangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kdan_kdan_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopXUsersTransactionByDateRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopXUsersTransactionByDateRangeRequest) ProtoMessage() {}

func (x *GetTopXUsersTransactionByDateRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kdan_kdan_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopXUsersTransactionByDateRangeRequest.ProtoReflect.Descriptor instead.
func (*GetTopXUsersTransactionByDateRangeRequest) Descriptor() ([]byte, []int) {
	return file_kdan_kdan_proto_rawDescGZIP(), []int{6}
}

func (x *GetTopXUsersTransactionByDateRangeRequest) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *GetTopXUsersTransactionByDateRangeRequest) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *GetTopXUsersTransactionByDateRangeRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type GetTopXUsersTransactionByDateRangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserTransactions []*GetTopXUsersTransactionByDateRangeResponseUserTransaction `protobuf:"bytes,1,rep,name=user_transactions,json=userTransactions,proto3" json:"user_transactions,omitempty"`
}

func (x *GetTopXUsersTransactionByDateRangeResponse) Reset() {
	*x = GetTopXUsersTransactionByDateRangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kdan_kdan_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopXUsersTransactionByDateRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopXUsersTransactionByDateRangeResponse) ProtoMessage() {}

func (x *GetTopXUsersTransactionByDateRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kdan_kdan_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopXUsersTransactionByDateRangeResponse.ProtoReflect.Descriptor instead.
func (*GetTopXUsersTransactionByDateRangeResponse) Descriptor() ([]byte, []int) {
	return file_kdan_kdan_proto_rawDescGZIP(), []int{7}
}

func (x *GetTopXUsersTransactionByDateRangeResponse) GetUserTransactions() []*GetTopXUsersTransactionByDateRangeResponseUserTransaction {
	if x != nil {
		return x.UserTransactions
	}
	return nil
}

type GetAggTransactionsByDateRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	EndAt   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
}

func (x *GetAggTransactionsByDateRangeRequest) Reset() {
	*x = GetAggTransactionsByDateRangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kdan_kdan_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAggTransactionsByDateRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAggTransactionsByDateRangeRequest) ProtoMessage() {}

func (x *GetAggTransactionsByDateRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kdan_kdan_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAggTransactionsByDateRangeRequest.ProtoReflect.Descriptor instead.
func (*GetAggTransactionsByDateRangeRequest) Descriptor() ([]byte, []int) {
	return file_kdan_kdan_proto_rawDescGZIP(), []int{8}
}

func (x *GetAggTransactionsByDateRangeRequest) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *GetAggTransactionsByDateRangeRequest) GetEndAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndAt
	}
	return nil
}

type GetAggTransactionsByDateRangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaskTransactions []*GetAggTransactionsByDateRangeResponseMaskTransaction `protobuf:"bytes,1,rep,name=mask_transactions,json=maskTransactions,proto3" json:"mask_transactions,omitempty"`
}

func (x *GetAggTransactionsByDateRangeResponse) Reset() {
	*x = GetAggTransactionsByDateRangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kdan_kdan_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAggTransactionsByDateRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAggTransactionsByDateRangeResponse) ProtoMessage() {}

func (x *GetAggTransactionsByDateRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kdan_kdan_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAggTransactionsByDateRangeResponse.ProtoReflect.Descriptor instead.
func (*GetAggTransactionsByDateRangeResponse) Descriptor() ([]byte, []int) {
	return file_kdan_kdan_proto_rawDescGZIP(), []int{9}
}

func (x *GetAggTransactionsByDateRangeResponse) GetMaskTransactions() []*GetAggTransactionsByDateRangeResponseMaskTransaction {
	if x != nil {
		return x.MaskTransactions
	}
	return nil
}

type GetPharmaciesByNameRelevancyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetPharmaciesByNameRelevancyRequest) Reset() {
	*x = GetPharmaciesByNameRelevancyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kdan_kdan_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPharmaciesByNameRelevancyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPharmaciesByNameRelevancyRequest) ProtoMessage() {}

func (x *GetPharmaciesByNameRelevancyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kdan_kdan_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPharmaciesByNameRelevancyRequest.ProtoReflect.Descriptor instead.
func (*GetPharmaciesByNameRelevancyRequest) Descriptor() ([]byte, []int) {
	return file_kdan_kdan_proto_rawDescGZIP(), []int{10}
}

func (x *GetPharmaciesByNameRelevancyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetPharmaciesByNameRelevancyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pharmacies []*pharmacy.Pharmacy `protobuf:"bytes,1,rep,name=pharmacies,proto3" json:"pharmacies,omitempty"`
}

func (x *GetPharmaciesByNameRelevancyResponse) Reset() {
	*x = GetPharmaciesByNameRelevancyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kdan_kdan_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPharmaciesByNameRelevancyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPharmaciesByNameRelevancyResponse) ProtoMessage() {}

func (x *GetPharmaciesByNameRelevancyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kdan_kdan_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPharmaciesByNameRelevancyResponse.ProtoReflect.Descriptor instead.
func (*GetPharmaciesByNameRelevancyResponse) Descriptor() ([]byte, []int) {
	return file_kdan_kdan_proto_rawDescGZIP(), []int{11}
}

func (x *GetPharmaciesByNameRelevancyResponse) GetPharmacies() []*pharmacy.Pharmacy {
	if x != nil {
		return x.Pharmacies
	}
	return nil
}

type GetMasksByNameRelevancyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetMasksByNameRelevancyRequest) Reset() {
	*x = GetMasksByNameRelevancyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kdan_kdan_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMasksByNameRelevancyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMasksByNameRelevancyRequest) ProtoMessage() {}

func (x *GetMasksByNameRelevancyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kdan_kdan_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMasksByNameRelevancyRequest.ProtoReflect.Descriptor instead.
func (*GetMasksByNameRelevancyRequest) Descriptor() ([]byte, []int) {
	return file_kdan_kdan_proto_rawDescGZIP(), []int{12}
}

func (x *GetMasksByNameRelevancyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetMasksByNameRelevancyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Masks []*pharmacy.Mask `protobuf:"bytes,1,rep,name=masks,proto3" json:"masks,omitempty"`
}

func (x *GetMasksByNameRelevancyResponse) Reset() {
	*x = GetMasksByNameRelevancyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kdan_kdan_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMasksByNameRelevancyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMasksByNameRelevancyResponse) ProtoMessage() {}

func (x *GetMasksByNameRelevancyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kdan_kdan_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMasksByNameRelevancyResponse.ProtoReflect.Descriptor instead.
func (*GetMasksByNameRelevancyResponse) Descriptor() ([]byte, []int) {
	return file_kdan_kdan_proto_rawDescGZIP(), []int{13}
}

func (x *GetMasksByNameRelevancyResponse) GetMasks() []*pharmacy.Mask {
	if x != nil {
		return x.Masks
	}
	return nil
}

type PurchaseMaskFromPharmacyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PharmacyId int32 `protobuf:"varint,2,opt,name=pharmacy_id,json=pharmacyId,proto3" json:"pharmacy_id,omitempty"`
	MaskId     int32 `protobuf:"varint,3,opt,name=mask_id,json=maskId,proto3" json:"mask_id,omitempty"`
}

func (x *PurchaseMaskFromPharmacyRequest) Reset() {
	*x = PurchaseMaskFromPharmacyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kdan_kdan_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurchaseMaskFromPharmacyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchaseMaskFromPharmacyRequest) ProtoMessage() {}

func (x *PurchaseMaskFromPharmacyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kdan_kdan_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchaseMaskFromPharmacyRequest.ProtoReflect.Descriptor instead.
func (*PurchaseMaskFromPharmacyRequest) Descriptor() ([]byte, []int) {
	return file_kdan_kdan_proto_rawDescGZIP(), []int{14}
}

func (x *PurchaseMaskFromPharmacyRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PurchaseMaskFromPharmacyRequest) GetPharmacyId() int32 {
	if x != nil {
		return x.PharmacyId
	}
	return 0
}

func (x *PurchaseMaskFromPharmacyRequest) GetMaskId() int32 {
	if x != nil {
		return x.MaskId
	}
	return 0
}

type PurchaseMaskFromPharmacyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId            int32                  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PharmacyId        int32                  `protobuf:"varint,3,opt,name=pharmacy_id,json=pharmacyId,proto3" json:"pharmacy_id,omitempty"`
	MaskId            int32                  `protobuf:"varint,4,opt,name=mask_id,json=maskId,proto3" json:"mask_id,omitempty"`
	TransactionAmount float32                `protobuf:"fixed32,5,opt,name=transaction_amount,json=transactionAmount,proto3" json:"transaction_amount,omitempty"`
	TransactionDate   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=transaction_date,json=transactionDate,proto3" json:"transaction_date,omitempty"`
}

func (x *PurchaseMaskFromPharmacyResponse) Reset() {
	*x = PurchaseMaskFromPharmacyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kdan_kdan_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurchaseMaskFromPharmacyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchaseMaskFromPharmacyResponse) ProtoMessage() {}

func (x *PurchaseMaskFromPharmacyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kdan_kdan_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchaseMaskFromPharmacyResponse.ProtoReflect.Descriptor instead.
func (*PurchaseMaskFromPharmacyResponse) Descriptor() ([]byte, []int) {
	return file_kdan_kdan_proto_rawDescGZIP(), []int{15}
}

func (x *PurchaseMaskFromPharmacyResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PurchaseMaskFromPharmacyResponse) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PurchaseMaskFromPharmacyResponse) GetPharmacyId() int32 {
	if x != nil {
		return x.PharmacyId
	}
	return 0
}

func (x *PurchaseMaskFromPharmacyResponse) GetMaskId() int32 {
	if x != nil {
		return x.MaskId
	}
	return 0
}

func (x *PurchaseMaskFromPharmacyResponse) GetTransactionAmount() float32 {
	if x != nil {
		return x.TransactionAmount
	}
	return 0
}

func (x *PurchaseMaskFromPharmacyResponse) GetTransactionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TransactionDate
	}
	return nil
}

type GetSoldMasksByPharmacyResponseSoldMask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaskId       int32                  `protobuf:"varint,1,opt,name=mask_id,json=maskId,proto3" json:"mask_id,omitempty"`
	MaskName     string                 `protobuf:"bytes,2,opt,name=mask_name,json=maskName,proto3" json:"mask_name,omitempty"`
	PharmacyId   int32                  `protobuf:"varint,3,opt,name=pharmacy_id,json=pharmacyId,proto3" json:"pharmacy_id,omitempty"`
	PharmacyName string                 `protobuf:"bytes,4,opt,name=pharmacy_name,json=pharmacyName,proto3" json:"pharmacy_name,omitempty"`
	Price        float32                `protobuf:"fixed32,5,opt,name=price,proto3" json:"price,omitempty"`
	SoldAt       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=sold_at,json=soldAt,proto3" json:"sold_at,omitempty"`
}

func (x *GetSoldMasksByPharmacyResponseSoldMask) Reset() {
	*x = GetSoldMasksByPharmacyResponseSoldMask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kdan_kdan_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSoldMasksByPharmacyResponseSoldMask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSoldMasksByPharmacyResponseSoldMask) ProtoMessage() {}

func (x *GetSoldMasksByPharmacyResponseSoldMask) ProtoReflect() protoreflect.Message {
	mi := &file_kdan_kdan_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSoldMasksByPharmacyResponseSoldMask.ProtoReflect.Descriptor instead.
func (*GetSoldMasksByPharmacyResponseSoldMask) Descriptor() ([]byte, []int) {
	return file_kdan_kdan_proto_rawDescGZIP(), []int{3, 0}
}

func (x *GetSoldMasksByPharmacyResponseSoldMask) GetMaskId() int32 {
	if x != nil {
		return x.MaskId
	}
	return 0
}

func (x *GetSoldMasksByPharmacyResponseSoldMask) GetMaskName() string {
	if x != nil {
		return x.MaskName
	}
	return ""
}

func (x *GetSoldMasksByPharmacyResponseSoldMask) GetPharmacyId() int32 {
	if x != nil {
		return x.PharmacyId
	}
	return 0
}

func (x *GetSoldMasksByPharmacyResponseSoldMask) GetPharmacyName() string {
	if x != nil {
		return x.PharmacyName
	}
	return ""
}

func (x *GetSoldMasksByPharmacyResponseSoldMask) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *GetSoldMasksByPharmacyResponseSoldMask) GetSoldAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SoldAt
	}
	return nil
}

type GetPharmaciesMaskCountsByMaskPriceRangeResponsePharmaciesMaskCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PharmacyId    int32  `protobuf:"varint,1,opt,name=pharmacy_id,json=pharmacyId,proto3" json:"pharmacy_id,omitempty"`
	PharmacyName  string `protobuf:"bytes,2,opt,name=pharmacy_name,json=pharmacyName,proto3" json:"pharmacy_name,omitempty"`
	MaskTypeCount int32  `protobuf:"varint,3,opt,name=mask_type_count,json=maskTypeCount,proto3" json:"mask_type_count,omitempty"`
}

func (x *GetPharmaciesMaskCountsByMaskPriceRangeResponsePharmaciesMaskCount) Reset() {
	*x = GetPharmaciesMaskCountsByMaskPriceRangeResponsePharmaciesMaskCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kdan_kdan_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPharmaciesMaskCountsByMaskPriceRangeResponsePharmaciesMaskCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPharmaciesMaskCountsByMaskPriceRangeResponsePharmaciesMaskCount) ProtoMessage() {}

func (x *GetPharmaciesMaskCountsByMaskPriceRangeResponsePharmaciesMaskCount) ProtoReflect() protoreflect.Message {
	mi := &file_kdan_kdan_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPharmaciesMaskCountsByMaskPriceRangeResponsePharmaciesMaskCount.ProtoReflect.Descriptor instead.
func (*GetPharmaciesMaskCountsByMaskPriceRangeResponsePharmaciesMaskCount) Descriptor() ([]byte, []int) {
	return file_kdan_kdan_proto_rawDescGZIP(), []int{5, 0}
}

func (x *GetPharmaciesMaskCountsByMaskPriceRangeResponsePharmaciesMaskCount) GetPharmacyId() int32 {
	if x != nil {
		return x.PharmacyId
	}
	return 0
}

func (x *GetPharmaciesMaskCountsByMaskPriceRangeResponsePharmaciesMaskCount) GetPharmacyName() string {
	if x != nil {
		return x.PharmacyName
	}
	return ""
}

func (x *GetPharmaciesMaskCountsByMaskPriceRangeResponsePharmaciesMaskCount) GetMaskTypeCount() int32 {
	if x != nil {
		return x.MaskTypeCount
	}
	return 0
}

type GetTopXUsersTransactionByDateRangeResponseUserTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                 int32   `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName               string  `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	TotalTransactionAmount float32 `protobuf:"fixed32,3,opt,name=total_transaction_amount,json=totalTransactionAmount,proto3" json:"total_transaction_amount,omitempty"`
}

func (x *GetTopXUsersTransactionByDateRangeResponseUserTransaction) Reset() {
	*x = GetTopXUsersTransactionByDateRangeResponseUserTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kdan_kdan_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopXUsersTransactionByDateRangeResponseUserTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopXUsersTransactionByDateRangeResponseUserTransaction) ProtoMessage() {}

func (x *GetTopXUsersTransactionByDateRangeResponseUserTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_kdan_kdan_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopXUsersTransactionByDateRangeResponseUserTransaction.ProtoReflect.Descriptor instead.
func (*GetTopXUsersTransactionByDateRangeResponseUserTransaction) Descriptor() ([]byte, []int) {
	return file_kdan_kdan_proto_rawDescGZIP(), []int{7, 0}
}

func (x *GetTopXUsersTransactionByDateRangeResponseUserTransaction) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetTopXUsersTransactionByDateRangeResponseUserTransaction) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *GetTopXUsersTransactionByDateRangeResponseUserTransaction) GetTotalTransactionAmount() float32 {
	if x != nil {
		return x.TotalTransactionAmount
	}
	return 0
}

type GetAggTransactionsByDateRangeResponseMaskTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaskId                 int32   `protobuf:"varint,1,opt,name=mask_id,json=maskId,proto3" json:"mask_id,omitempty"`
	MaskName               string  `protobuf:"bytes,2,opt,name=mask_name,json=maskName,proto3" json:"mask_name,omitempty"`
	SoldMaskCount          int32   `protobuf:"varint,3,opt,name=sold_mask_count,json=soldMaskCount,proto3" json:"sold_mask_count,omitempty"`
	TotalTransactionAmount float32 `protobuf:"fixed32,4,opt,name=total_transaction_amount,json=totalTransactionAmount,proto3" json:"total_transaction_amount,omitempty"`
}

func (x *GetAggTransactionsByDateRangeResponseMaskTransaction) Reset() {
	*x = GetAggTransactionsByDateRangeResponseMaskTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kdan_kdan_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAggTransactionsByDateRangeResponseMaskTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAggTransactionsByDateRangeResponseMaskTransaction) ProtoMessage() {}

func (x *GetAggTransactionsByDateRangeResponseMaskTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_kdan_kdan_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAggTransactionsByDateRangeResponseMaskTransaction.ProtoReflect.Descriptor instead.
func (*GetAggTransactionsByDateRangeResponseMaskTransaction) Descriptor() ([]byte, []int) {
	return file_kdan_kdan_proto_rawDescGZIP(), []int{9, 0}
}

func (x *GetAggTransactionsByDateRangeResponseMaskTransaction) GetMaskId() int32 {
	if x != nil {
		return x.MaskId
	}
	return 0
}

func (x *GetAggTransactionsByDateRangeResponseMaskTransaction) GetMaskName() string {
	if x != nil {
		return x.MaskName
	}
	return ""
}

func (x *GetAggTransactionsByDateRangeResponseMaskTransaction) GetSoldMaskCount() int32 {
	if x != nil {
		return x.SoldMaskCount
	}
	return 0
}

func (x *GetAggTransactionsByDateRangeResponseMaskTransaction) GetTotalTransactionAmount() float32 {
	if x != nil {
		return x.TotalTransactionAmount
	}
	return 0
}

var File_kdan_kdan_proto protoreflect.FileDescriptor

var file_kdan_kdan_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6b, 0x64, 0x61, 0x6e, 0x2f, 0x6b, 0x64, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x04, 0x6b, 0x64, 0x61, 0x6e, 0x1a, 0x17, 0x70, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63,
	0x79, 0x2f, 0x70, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x6b, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x69, 0x65, 0x73,
	0x42, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x03, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6b, 0x64, 0x61,
	0x6e, 0x2e, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x52, 0x03, 0x64, 0x61, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x68, 0x6f, 0x75, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x22, 0x51, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x50, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x69, 0x65, 0x73, 0x42, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x70,
	0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x79, 0x2e, 0x50, 0x68, 0x61, 0x72, 0x6d,
	0x61, 0x63, 0x79, 0x52, 0x0a, 0x70, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x69, 0x65, 0x73, 0x22,
	0xd1, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x73,
	0x42, 0x79, 0x50, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6b, 0x64, 0x61, 0x6e, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x6f, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x79, 0x50, 0x68,
	0x61, 0x72, 0x6d, 0x61, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x42, 0x79, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x26, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x6b, 0x64, 0x61, 0x6e, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0x29, 0x0a, 0x08, 0x53, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x0d, 0x0a, 0x09, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x10, 0x01, 0x22, 0xc4, 0x02, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x73, 0x42, 0x79, 0x50, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x64, 0x61,
	0x6e, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x79,
	0x50, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x73, 0x6f, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x73, 0x1a, 0xd2, 0x01, 0x0a, 0x09, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x68, 0x61,
	0x72, 0x6d, 0x61, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x70, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x68,
	0x61, 0x72, 0x6d, 0x61, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x06, 0x73, 0x6f, 0x6c, 0x64, 0x41, 0x74, 0x22, 0xb3, 0x01, 0x0a, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x69, 0x65, 0x73, 0x4d, 0x61, 0x73, 0x6b,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x4d, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6d,
	0x61, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x61, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x61, 0x6e,
	0x22, 0xbd, 0x02, 0x0a, 0x2f, 0x47, 0x65, 0x74, 0x50, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x69,
	0x65, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x4d, 0x61,
	0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x16, 0x70, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63,
	0x69, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x6b, 0x64, 0x61, 0x6e, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x69, 0x65, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x4d, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x68, 0x61,
	0x72, 0x6d, 0x61, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x14, 0x70, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x69, 0x65, 0x73, 0x4d, 0x61,
	0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0x85, 0x01, 0x0a, 0x15, 0x70, 0x68, 0x61,
	0x72, 0x6d, 0x61, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63,
	0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x68, 0x61, 0x72,
	0x6d, 0x61, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x73, 0x6b,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x6d, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xa9, 0x01, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x58, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x44, 0x61,
	0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35,
	0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xa1, 0x02, 0x0a,
	0x2a, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x58, 0x55, 0x73, 0x65, 0x72, 0x73, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x11, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6b, 0x64, 0x61, 0x6e, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x70, 0x58, 0x55, 0x73, 0x65, 0x72, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x82, 0x01, 0x0a, 0x10,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x90, 0x01, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74,
	0x12, 0x31, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x65, 0x6e,
	0x64, 0x41, 0x74, 0x22, 0xbf, 0x02, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a,
	0x11, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6b, 0x64, 0x61, 0x6e, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x6d, 0x61, 0x73, 0x6b, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xaa, 0x01, 0x0a, 0x10, 0x6d, 0x61, 0x73,
	0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a,
	0x07, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6d, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x73, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x6f,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x39, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x50, 0x68, 0x61, 0x72,
	0x6d, 0x61, 0x63, 0x69, 0x65, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x65,
	0x76, 0x61, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x5a, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x50, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x69, 0x65,
	0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x63, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x70, 0x68, 0x61, 0x72,
	0x6d, 0x61, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x79, 0x2e, 0x50, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x79,
	0x52, 0x0a, 0x70, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x69, 0x65, 0x73, 0x22, 0x34, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x6c, 0x65, 0x76, 0x61, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x47, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x6d, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x79, 0x2e,
	0x4d, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x6d, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x74, 0x0a, 0x1f, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x50,
	0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x68, 0x61, 0x72, 0x6d,
	0x61, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x68,
	0x61, 0x72, 0x6d, 0x61, 0x63, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x22, 0xfb, 0x01, 0x0a, 0x20, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4d, 0x61,
	0x73, 0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x79, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6d, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x2a,
	0x5c, 0x0a, 0x09, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x0f, 0x0a, 0x0b,
	0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x6d, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x74, 0x75, 0x65, 0x10, 0x02, 0x12,
	0x07, 0x0a, 0x03, 0x77, 0x65, 0x64, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x74, 0x68, 0x75, 0x72,
	0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x66, 0x72, 0x69, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x73,
	0x61, 0x74, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x73, 0x75, 0x6e, 0x10, 0x07, 0x2a, 0x1a, 0x0a,
	0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x07, 0x0a, 0x03, 0x61, 0x73, 0x63, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x10, 0x01, 0x32, 0xc7, 0x09, 0x0a, 0x0b, 0x4b, 0x64,
	0x61, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7e, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x50, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x69, 0x65, 0x73, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x20, 0x2e, 0x6b, 0x64, 0x61, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x68, 0x61, 0x72, 0x6d,
	0x61, 0x63, 0x69, 0x65, 0x73, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6b, 0x64, 0x61, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x68, 0x61,
	0x72, 0x6d, 0x61, 0x63, 0x69, 0x65, 0x73, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x69, 0x65,
	0x73, 0x2f, 0x62, 0x79, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x53, 0x6f, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x79, 0x50, 0x68, 0x61, 0x72,
	0x6d, 0x61, 0x63, 0x79, 0x12, 0x23, 0x2e, 0x6b, 0x64, 0x61, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x6f, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x79, 0x50, 0x68, 0x61, 0x72, 0x6d, 0x61,
	0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6b, 0x64, 0x61, 0x6e,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x79, 0x50,
	0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x6f, 0x6c, 0x64, 0x6d, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x62, 0x79, 0x2f, 0x70, 0x68,
	0x61, 0x72, 0x6d, 0x61, 0x63, 0x79, 0x12, 0xbe, 0x01, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x50, 0x68,
	0x61, 0x72, 0x6d, 0x61, 0x63, 0x69, 0x65, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x42, 0x79, 0x4d, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x34, 0x2e, 0x6b, 0x64, 0x61, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x68, 0x61,
	0x72, 0x6d, 0x61, 0x63, 0x69, 0x65, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x42, 0x79, 0x4d, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6b, 0x64, 0x61, 0x6e, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x69, 0x65, 0x73, 0x4d, 0x61, 0x73,
	0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x4d, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x6d, 0x61, 0x73, 0x6b,
	0x73, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0xaa, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x54,
	0x6f, 0x70, 0x58, 0x55, 0x73, 0x65, 0x72, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2f,
	0x2e, 0x6b, 0x64, 0x61, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x58, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x44,
	0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x6b, 0x64, 0x61, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x58, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x2f, 0x62, 0x79, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x9b, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x44, 0x61, 0x74,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2a, 0x2e, 0x6b, 0x64, 0x61, 0x6e, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x67, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6b, 0x64, 0x61, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x44, 0x61,
	0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6d, 0x61, 0x73, 0x6b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x2f, 0x62, 0x79, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x50, 0x68, 0x61, 0x72, 0x6d, 0x61,
	0x63, 0x69, 0x65, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61,
	0x6e, 0x63, 0x79, 0x12, 0x29, 0x2e, 0x6b, 0x64, 0x61, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x68,
	0x61, 0x72, 0x6d, 0x61, 0x63, 0x69, 0x65, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x6c, 0x65, 0x76, 0x61, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x6b, 0x64, 0x61, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63,
	0x69, 0x65, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e,
	0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x14, 0x12, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x68, 0x61, 0x72,
	0x6d, 0x61, 0x63, 0x69, 0x65, 0x73, 0x12, 0x7d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x73,
	0x6b, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x63,
	0x79, 0x12, 0x24, 0x2e, 0x6b, 0x64, 0x61, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x6b,
	0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x63, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6b, 0x64, 0x61, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x6c,
	0x65, 0x76, 0x61, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x8b, 0x01, 0x0a, 0x18, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x68, 0x61, 0x72, 0x6d, 0x61,
	0x63, 0x79, 0x12, 0x25, 0x2e, 0x6b, 0x64, 0x61, 0x6e, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x68, 0x61, 0x72, 0x6d, 0x61,
	0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6b, 0x64, 0x61, 0x6e,
	0x2e, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x46, 0x72, 0x6f,
	0x6d, 0x50, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x2f, 0x6d, 0x61, 0x73, 0x6b,
	0x3a, 0x01, 0x2a, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x4a, 0x61, 0x6d, 0x65, 0x73, 0x48, 0x73, 0x75, 0x33, 0x33, 0x33, 0x2f, 0x6b, 0x64,
	0x61, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6b, 0x64, 0x61, 0x6e, 0x3b, 0x6b, 0x64,
	0x61, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kdan_kdan_proto_rawDescOnce sync.Once
	file_kdan_kdan_proto_rawDescData = file_kdan_kdan_proto_rawDesc
)

func file_kdan_kdan_proto_rawDescGZIP() []byte {
	file_kdan_kdan_proto_rawDescOnce.Do(func() {
		file_kdan_kdan_proto_rawDescData = protoimpl.X.CompressGZIP(file_kdan_kdan_proto_rawDescData)
	})
	return file_kdan_kdan_proto_rawDescData
}

var file_kdan_kdan_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_kdan_kdan_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_kdan_kdan_proto_goTypes = []interface{}{
	(DayOfWeek)(0), // 0: kdan.DayOfWeek
	(Order)(0),     // 1: kdan.Order
	(GetSoldMasksByPharmacyRequest_SortedBy)(0),                                // 2: kdan.GetSoldMasksByPharmacyRequest.SortedBy
	(*GetPharmaciesByTimeRequest)(nil),                                         // 3: kdan.GetPharmaciesByTimeRequest
	(*GetPharmaciesByTimeResponse)(nil),                                        // 4: kdan.GetPharmaciesByTimeResponse
	(*GetSoldMasksByPharmacyRequest)(nil),                                      // 5: kdan.GetSoldMasksByPharmacyRequest
	(*GetSoldMasksByPharmacyResponse)(nil),                                     // 6: kdan.GetSoldMasksByPharmacyResponse
	(*GetPharmaciesMaskCountsByMaskPriceRangeRequest)(nil),                     // 7: kdan.GetPharmaciesMaskCountsByMaskPriceRangeRequest
	(*GetPharmaciesMaskCountsByMaskPriceRangeResponse)(nil),                    // 8: kdan.GetPharmaciesMaskCountsByMaskPriceRangeResponse
	(*GetTopXUsersTransactionByDateRangeRequest)(nil),                          // 9: kdan.GetTopXUsersTransactionByDateRangeRequest
	(*GetTopXUsersTransactionByDateRangeResponse)(nil),                         // 10: kdan.GetTopXUsersTransactionByDateRangeResponse
	(*GetAggTransactionsByDateRangeRequest)(nil),                               // 11: kdan.GetAggTransactionsByDateRangeRequest
	(*GetAggTransactionsByDateRangeResponse)(nil),                              // 12: kdan.GetAggTransactionsByDateRangeResponse
	(*GetPharmaciesByNameRelevancyRequest)(nil),                                // 13: kdan.GetPharmaciesByNameRelevancyRequest
	(*GetPharmaciesByNameRelevancyResponse)(nil),                               // 14: kdan.GetPharmaciesByNameRelevancyResponse
	(*GetMasksByNameRelevancyRequest)(nil),                                     // 15: kdan.GetMasksByNameRelevancyRequest
	(*GetMasksByNameRelevancyResponse)(nil),                                    // 16: kdan.GetMasksByNameRelevancyResponse
	(*PurchaseMaskFromPharmacyRequest)(nil),                                    // 17: kdan.PurchaseMaskFromPharmacyRequest
	(*PurchaseMaskFromPharmacyResponse)(nil),                                   // 18: kdan.PurchaseMaskFromPharmacyResponse
	(*GetSoldMasksByPharmacyResponseSoldMask)(nil),                             // 19: kdan.GetSoldMasksByPharmacyResponse.sold_mask
	(*GetPharmaciesMaskCountsByMaskPriceRangeResponsePharmaciesMaskCount)(nil), // 20: kdan.GetPharmaciesMaskCountsByMaskPriceRangeResponse.pharmacies_mask_count
	(*GetTopXUsersTransactionByDateRangeResponseUserTransaction)(nil),          // 21: kdan.GetTopXUsersTransactionByDateRangeResponse.user_transaction
	(*GetAggTransactionsByDateRangeResponseMaskTransaction)(nil),               // 22: kdan.GetAggTransactionsByDateRangeResponse.mask_transaction
	(*pharmacy.Pharmacy)(nil),                                                  // 23: pharmacy.Pharmacy
	(*timestamppb.Timestamp)(nil),                                              // 24: google.protobuf.Timestamp
	(*pharmacy.Mask)(nil),                                                      // 25: pharmacy.Mask
}
var file_kdan_kdan_proto_depIdxs = []int32{
	0,  // 0: kdan.GetPharmaciesByTimeRequest.day:type_name -> kdan.DayOfWeek
	23, // 1: kdan.GetPharmaciesByTimeResponse.pharmacies:type_name -> pharmacy.Pharmacy
	2,  // 2: kdan.GetSoldMasksByPharmacyRequest.sorted_by:type_name -> kdan.GetSoldMasksByPharmacyRequest.SortedBy
	1,  // 3: kdan.GetSoldMasksByPharmacyRequest.order_by:type_name -> kdan.Order
	19, // 4: kdan.GetSoldMasksByPharmacyResponse.sold_masks:type_name -> kdan.GetSoldMasksByPharmacyResponse.sold_mask
	20, // 5: kdan.GetPharmaciesMaskCountsByMaskPriceRangeResponse.pharmacies_mask_counts:type_name -> kdan.GetPharmaciesMaskCountsByMaskPriceRangeResponse.pharmacies_mask_count
	24, // 6: kdan.GetTopXUsersTransactionByDateRangeRequest.start_at:type_name -> google.protobuf.Timestamp
	24, // 7: kdan.GetTopXUsersTransactionByDateRangeRequest.end_at:type_name -> google.protobuf.Timestamp
	21, // 8: kdan.GetTopXUsersTransactionByDateRangeResponse.user_transactions:type_name -> kdan.GetTopXUsersTransactionByDateRangeResponse.user_transaction
	24, // 9: kdan.GetAggTransactionsByDateRangeRequest.start_at:type_name -> google.protobuf.Timestamp
	24, // 10: kdan.GetAggTransactionsByDateRangeRequest.end_at:type_name -> google.protobuf.Timestamp
	22, // 11: kdan.GetAggTransactionsByDateRangeResponse.mask_transactions:type_name -> kdan.GetAggTransactionsByDateRangeResponse.mask_transaction
	23, // 12: kdan.GetPharmaciesByNameRelevancyResponse.pharmacies:type_name -> pharmacy.Pharmacy
	25, // 13: kdan.GetMasksByNameRelevancyResponse.masks:type_name -> pharmacy.Mask
	24, // 14: kdan.PurchaseMaskFromPharmacyResponse.transaction_date:type_name -> google.protobuf.Timestamp
	24, // 15: kdan.GetSoldMasksByPharmacyResponse.sold_mask.sold_at:type_name -> google.protobuf.Timestamp
	3,  // 16: kdan.KdanService.GetPharmaciesByTime:input_type -> kdan.GetPharmaciesByTimeRequest
	5,  // 17: kdan.KdanService.GetSoldMasksByPharmacy:input_type -> kdan.GetSoldMasksByPharmacyRequest
	7,  // 18: kdan.KdanService.GetPharmaciesMaskCountsByMaskPriceRange:input_type -> kdan.GetPharmaciesMaskCountsByMaskPriceRangeRequest
	9,  // 19: kdan.KdanService.GetTopXUsersTransactionByDateRange:input_type -> kdan.GetTopXUsersTransactionByDateRangeRequest
	11, // 20: kdan.KdanService.GetAggTransactionsByDateRange:input_type -> kdan.GetAggTransactionsByDateRangeRequest
	13, // 21: kdan.KdanService.GetPharmaciesByNameRelevancy:input_type -> kdan.GetPharmaciesByNameRelevancyRequest
	15, // 22: kdan.KdanService.GetMasksByNameRelevancy:input_type -> kdan.GetMasksByNameRelevancyRequest
	17, // 23: kdan.KdanService.PurchaseMaskFromPharmacy:input_type -> kdan.PurchaseMaskFromPharmacyRequest
	4,  // 24: kdan.KdanService.GetPharmaciesByTime:output_type -> kdan.GetPharmaciesByTimeResponse
	6,  // 25: kdan.KdanService.GetSoldMasksByPharmacy:output_type -> kdan.GetSoldMasksByPharmacyResponse
	8,  // 26: kdan.KdanService.GetPharmaciesMaskCountsByMaskPriceRange:output_type -> kdan.GetPharmaciesMaskCountsByMaskPriceRangeResponse
	10, // 27: kdan.KdanService.GetTopXUsersTransactionByDateRange:output_type -> kdan.GetTopXUsersTransactionByDateRangeResponse
	12, // 28: kdan.KdanService.GetAggTransactionsByDateRange:output_type -> kdan.GetAggTransactionsByDateRangeResponse
	14, // 29: kdan.KdanService.GetPharmaciesByNameRelevancy:output_type -> kdan.GetPharmaciesByNameRelevancyResponse
	16, // 30: kdan.KdanService.GetMasksByNameRelevancy:output_type -> kdan.GetMasksByNameRelevancyResponse
	18, // 31: kdan.KdanService.PurchaseMaskFromPharmacy:output_type -> kdan.PurchaseMaskFromPharmacyResponse
	24, // [24:32] is the sub-list for method output_type
	16, // [16:24] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_kdan_kdan_proto_init() }
func file_kdan_kdan_proto_init() {
	if File_kdan_kdan_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kdan_kdan_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPharmaciesByTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kdan_kdan_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPharmaciesByTimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kdan_kdan_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSoldMasksByPharmacyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kdan_kdan_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSoldMasksByPharmacyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kdan_kdan_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPharmaciesMaskCountsByMaskPriceRangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kdan_kdan_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPharmaciesMaskCountsByMaskPriceRangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kdan_kdan_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopXUsersTransactionByDateRangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kdan_kdan_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopXUsersTransactionByDateRangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kdan_kdan_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAggTransactionsByDateRangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kdan_kdan_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAggTransactionsByDateRangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kdan_kdan_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPharmaciesByNameRelevancyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kdan_kdan_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPharmaciesByNameRelevancyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kdan_kdan_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMasksByNameRelevancyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kdan_kdan_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMasksByNameRelevancyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kdan_kdan_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurchaseMaskFromPharmacyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kdan_kdan_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurchaseMaskFromPharmacyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kdan_kdan_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSoldMasksByPharmacyResponseSoldMask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kdan_kdan_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPharmaciesMaskCountsByMaskPriceRangeResponsePharmaciesMaskCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kdan_kdan_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopXUsersTransactionByDateRangeResponseUserTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kdan_kdan_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAggTransactionsByDateRangeResponseMaskTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kdan_kdan_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kdan_kdan_proto_goTypes,
		DependencyIndexes: file_kdan_kdan_proto_depIdxs,
		EnumInfos:         file_kdan_kdan_proto_enumTypes,
		MessageInfos:      file_kdan_kdan_proto_msgTypes,
	}.Build()
	File_kdan_kdan_proto = out.File
	file_kdan_kdan_proto_rawDesc = nil
	file_kdan_kdan_proto_goTypes = nil
	file_kdan_kdan_proto_depIdxs = nil
}
